import pandas
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
import pickle
from sklearn.tree import export_graphviz
from IPython.display import Image  
import pydotplus
import graphviz
import graphviz.backend as be
from sklearn.datasets import *
from dtreeviz.trees import *
from dtreeviz import *
from IPython.display import Image, display_svg, SVG


df = pandas.read_csv("baseRawStor.csv", sep=";", header = 0)
print(df)

d = {'Stream': 0, 'Batch': 1}
df['Acquisition_mode'] = df['Acquisition_mode'].map(d)

d = {'sup1Peta': 3, 'in1T1P': 2, 'inf1Tera': 1}
df['SizeData'] = df['SizeData'].map(d)

d = {'UNS': 3, 'SEMI': 2, 'STRUC': 1}
df['D_type'] = df['D_type'].map(d)

d = {'NoLossNoDup': 1, 'DupData': 2, 'LossData': 3, 'LossDup': 4}
df['Quality'] = df['Quality'].map(d)

d = {'HDFS': 1, 'Cassandra': 2, 'MongoDB': 3, 'Oracle': 4, 'Apache Hbase' : 5, 'Apache CouchDB': 6, 'Neo4J': 7, 'ArangoDB': 8, 
     'OrientDB': 9, 'JanusGraph': 10, 'S3': 11, 'Azure Blob Storage': 12 , 'Local File System': 13}
df['Technology'] = df['Technology'].map(d)


d = {'Stream': 0, 'Batch': 1, 
     'sup1Peta': 3, 'in1T1P': 2, 'inf1Tera': 1, 
     'UNS': 3, 'SEMI': 2, 'STRUC': 1, 
     'LossDup': 1, 'Loss': 2, 'Dup': 3, 'NoLossNoDup': 4, 
     'RT': 2, 'NRT': 1, 
     'sup20': 20, 'in5_20': 10, 'inf5': 5, 
     'inf5': 1, 'in515': 2, 'sup15': 3, 
     'un': 1, 'plusieurs': 2 }

print(df)

features = ['Acquisition_mode', 'SizeData', 'D_type', 'Quality']

X = features
y = ['Technology']

print(X)
print(y)

clf= DecisionTreeClassifier(max_leaf_nodes=10, random_state=0)
model = clf.fit(df[X], df[y]) #La méthode fit est utilisée pour entraîner le modèle d'arbre de décision sur les données d'entraînement.

pickle.dump(model, open('RawStorTool.pickle', "wb"))
# tree.plot_tree(model, feature_names=features)

dot_data = tree.export_graphviz(clf, out_file=None, 
                                feature_names= ['Acquisition_mode', 'SizeData', 'D_type', 'Quality'],  
                                class_names= ["HDFS", "Cassandra", "MongoDB", "Oracle", 
                                              "Apache Hbase", "Apache CouchDB", "Neo4J", "ArangoDB", 
                                              "OrientDB", "JanusGraph", "S3", "Azure Blob Storage", "Local File System"],
                                filled=True)

graph = pydotplus.graph_from_dot_data(dot_data)  
Image(graph.create_png())



